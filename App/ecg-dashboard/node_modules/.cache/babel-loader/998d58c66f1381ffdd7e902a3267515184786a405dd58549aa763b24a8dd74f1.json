{"ast":null,"code":"var _jsxFileName = \"F:\\\\York\\\\EECS3640project\\\\ecg-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeUpdates = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // Holds the ECG messages from WebSocket\n  const [ws, setWs] = useState(null); // WebSocket connection\n  const [message, setMessage] = useState('');\n  const [clientId, setClientId] = useState('');\n  useEffect(() => {\n    const websocket = new WebSocket('ws://127.0.0.1:8080'); // Connect to the WebSocket server\n\n    websocket.onopen = () => {\n      console.log('WebSocket is connected');\n      const id = Math.floor(Math.random() * 1000);\n      setClientId(id);\n    };\n    websocket.onmessage = evt => {\n      const message = evt.data;\n      setMessages(prevMessages => [...prevMessages, message]); // Append new ECG data to the state\n    };\n    websocket.onclose = () => {\n      console.log('WebSocket is closed');\n    };\n    setWs(websocket);\n    return () => {\n      websocket.close(); // Clean up WebSocket connection on component unmount\n    };\n  }, []);\n  const sendMessage = () => {\n    if (ws) {\n      ws.send(JSON.stringify({\n        type: 'message',\n        payload: message,\n        clientId: clientId\n      }));\n      setMessage('');\n    }\n  };\n  const handleInputChange = event => {\n    setMessage(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Real-time ECG Monitor - Client \", clientId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) // Display the received ECG data\n    ), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeUpdates, \"JMRzPT7pHKwFhXLGKNk9UAaIIl8=\");\n_c = RealTimeUpdates;\nexport default RealTimeUpdates;\nvar _c;\n$RefreshReg$(_c, \"RealTimeUpdates\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RealTimeUpdates","_s","messages","setMessages","ws","setWs","message","setMessage","clientId","setClientId","websocket","WebSocket","onopen","console","log","id","Math","floor","random","onmessage","evt","data","prevMessages","onclose","close","sendMessage","send","JSON","stringify","type","payload","handleInputChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onChange","onClick","_c","$RefreshReg$"],"sources":["F:/York/EECS3640project/ecg-dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst RealTimeUpdates = () => {\n  const [messages, setMessages] = useState([]); // Holds the ECG messages from WebSocket\n  const [ws, setWs] = useState(null); // WebSocket connection\n  const [message, setMessage] = useState('');\n  const [clientId, setClientId] = useState('');\n\n  useEffect(() => {\n    const websocket = new WebSocket('ws://127.0.0.1:8080'); // Connect to the WebSocket server\n\n    websocket.onopen = () => {\n      console.log('WebSocket is connected');\n      const id = Math.floor(Math.random() * 1000);\n      setClientId(id);\n    };\n\n    websocket.onmessage = (evt) => {\n      const message = evt.data;\n      setMessages((prevMessages) => [...prevMessages, message]); // Append new ECG data to the state\n    };\n\n    websocket.onclose = () => {\n      console.log('WebSocket is closed');\n    };\n\n    setWs(websocket);\n\n    return () => {\n      websocket.close(); // Clean up WebSocket connection on component unmount\n    };\n  }, []);\n\n  const sendMessage = () => {\n    if (ws) {\n      ws.send(JSON.stringify({\n        type: 'message',\n        payload: message,\n        clientId: clientId\n      }));\n      setMessage('');\n    }\n  };\n\n  const handleInputChange = (event) => {\n    setMessage(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Real-time ECG Monitor - Client {clientId}</h1>\n      {messages.map((message, index) => (\n        <p key={index}>{message}</p> // Display the received ECG data\n      ))}\n      <input type=\"text\" value={message} onChange={handleInputChange} />\n      <button onClick={sendMessage}>Send Message</button>\n    </div>\n  );\n};\n\nexport default RealTimeUpdates;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}