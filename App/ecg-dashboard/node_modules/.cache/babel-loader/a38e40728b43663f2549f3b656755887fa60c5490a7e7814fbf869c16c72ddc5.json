{"ast":null,"code":"var _jsxFileName = \"F:\\\\York\\\\EECS3640project\\\\ecg-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [ws, setWs] = useState(null);\n  const [message, setMessage] = useState('');\n  const [clientId, setClientId] = useState('');\n  const [connected, setConnected] = useState(false); // Track connection status\n\n  // Retry connection logic\n  const connectWebSocket = () => {\n    const websocket = new WebSocket('ws://127.0.0.1:8080');\n    websocket.onopen = () => {\n      console.log('WebSocket is connected');\n      setConnected(true);\n      const id = Math.floor(Math.random() * 1000);\n      setClientId(id);\n    };\n    websocket.onmessage = evt => {\n      const message = evt.data;\n      setMessages(prevMessages => [...prevMessages, message]);\n    };\n    websocket.onclose = () => {\n      console.log('WebSocket is closed');\n      setConnected(false); // Track connection lost\n      setTimeout(connectWebSocket, 5000); // Try reconnecting after 5 seconds\n    };\n    websocket.onerror = error => {\n      console.log('WebSocket error:', error);\n    };\n    setWs(websocket);\n  };\n  useEffect(() => {\n    connectWebSocket(); // Initial WebSocket connection attempt\n\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n  const sendMessage = () => {\n    if (ws && connected) {\n      ws.send(JSON.stringify({\n        type: 'message',\n        payload: message,\n        clientId: clientId\n      }));\n      setMessage('');\n    } else {\n      console.log('WebSocket not connected');\n    }\n  };\n  const handleInputChange = event => {\n    setMessage(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Real-time Updates with WebSockets and React Hooks - Client \", clientId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"VhX5RyWp99G7Z7bGFu4gaMBxN6A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","messages","setMessages","ws","setWs","message","setMessage","clientId","setClientId","connected","setConnected","connectWebSocket","websocket","WebSocket","onopen","console","log","id","Math","floor","random","onmessage","evt","data","prevMessages","onclose","setTimeout","onerror","error","close","sendMessage","send","JSON","stringify","type","payload","handleInputChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onChange","onClick","_c","$RefreshReg$"],"sources":["F:/York/EECS3640project/ecg-dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [ws, setWs] = useState(null);\n  const [message, setMessage] = useState('');\n  const [clientId, setClientId] = useState('');\n  const [connected, setConnected] = useState(false);  // Track connection status\n\n  // Retry connection logic\n  const connectWebSocket = () => {\n    const websocket = new WebSocket('ws://127.0.0.1:8080');\n\n    websocket.onopen = () => {\n      console.log('WebSocket is connected');\n      setConnected(true);\n      const id = Math.floor(Math.random() * 1000);\n      setClientId(id);\n    };\n\n    websocket.onmessage = (evt) => {\n      const message = (evt.data);\n      setMessages((prevMessages) =>\n        [...prevMessages, message]);\n    };\n\n    websocket.onclose = () => {\n      console.log('WebSocket is closed');\n      setConnected(false); // Track connection lost\n      setTimeout(connectWebSocket, 5000);  // Try reconnecting after 5 seconds\n    };\n\n    websocket.onerror = (error) => {\n      console.log('WebSocket error:', error);\n    };\n\n    setWs(websocket);\n  };\n\n  useEffect(() => {\n    connectWebSocket();  // Initial WebSocket connection attempt\n\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = () => {\n    if (ws && connected) {\n      ws.send(JSON.stringify({\n        type: 'message',\n        payload: message,\n        clientId: clientId\n      }));\n      setMessage('');\n    } else {\n      console.log('WebSocket not connected');\n    }\n  };\n\n  const handleInputChange = (event) => {\n    setMessage(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Real-time Updates with WebSockets and React Hooks - Client {clientId}</h1>\n      {messages.map((message, index) => (\n        <p key={index}>{message}</p>\n      ))}\n      <input\n        type=\"text\"\n        value={message}\n        onChange={handleInputChange}\n      />\n      <button onClick={sendMessage}>\n        Send Message\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}