{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\silwa\\\\Documents\\\\Arduino\\\\holter_monitor_project\\\\App\\\\ecg-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js/auto';\n\n// Disable animations for better performance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.defaults.animation = false;\nconst RealTimeECG = () => {\n  _s();\n  const [ecgData, setEcgData] = useState([]);\n  const [ws, setWs] = useState(null);\n  useEffect(() => {\n    const websocket = new WebSocket('ws://127.0.0.1:8080'); // WebSocket server connection\n\n    websocket.onopen = () => {\n      console.log('WebSocket is connected');\n    };\n    websocket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      setEcgData(prevData => {\n        const updatedData = [...prevData, data.ecg_value];\n        if (updatedData.length > 100) {\n          updatedData.shift(); // Limit the number of points to 100\n        }\n        return updatedData;\n      });\n    };\n    websocket.onclose = () => {\n      console.log('WebSocket is closed');\n    };\n    setWs(websocket);\n    return () => {\n      websocket.close();\n    };\n  }, []);\n\n  // Chart.js data\n  const chartData = {\n    labels: Array(ecgData.length).fill(''),\n    // Empty labels for the x-axis\n    datasets: [{\n      label: 'ECG Data',\n      data: ecgData,\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 1,\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time ECG Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeECG, \"ELJIZAB/9sXP+OJ62nEvgK7UjXo=\");\n_c = RealTimeECG;\nexport default RealTimeECG;\nvar _c;\n$RefreshReg$(_c, \"RealTimeECG\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","jsxDEV","_jsxDEV","defaults","animation","RealTimeECG","_s","ecgData","setEcgData","ws","setWs","websocket","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","prevData","updatedData","ecg_value","length","shift","onclose","close","chartData","labels","Array","fill","datasets","label","borderColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/silwa/Documents/Arduino/holter_monitor_project/App/ecg-dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js/auto';\n\n// Disable animations for better performance\nChartJS.defaults.animation = false;\n\nconst RealTimeECG = () => {\n  const [ecgData, setEcgData] = useState([]);\n  const [ws, setWs] = useState(null);\n\n  useEffect(() => {\n    const websocket = new WebSocket('ws://127.0.0.1:8080');  // WebSocket server connection\n\n    websocket.onopen = () => {\n      console.log('WebSocket is connected');\n    };\n\n    websocket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      setEcgData((prevData) => {\n        const updatedData = [...prevData, data.ecg_value];\n        if (updatedData.length > 100) {\n          updatedData.shift();  // Limit the number of points to 100\n        }\n        return updatedData;\n      });\n    };\n\n    websocket.onclose = () => {\n      console.log('WebSocket is closed');\n    };\n\n    setWs(websocket);\n\n    return () => {\n      websocket.close();\n    };\n  }, []);\n\n  // Chart.js data\n  const chartData = {\n    labels: Array(ecgData.length).fill(''),  // Empty labels for the x-axis\n    datasets: [\n      {\n        label: 'ECG Data',\n        data: ecgData,\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 1,\n        fill: false,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <h1>Real-Time ECG Monitor</h1>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default RealTimeECG;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,QAAQ,eAAe;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAF,OAAO,CAACG,QAAQ,CAACC,SAAS,GAAG,KAAK;AAElC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,EAAE,EAAEC,KAAK,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAElCC,SAAS,CAAC,MAAM;IACd,MAAMc,SAAS,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAE;;IAEzDD,SAAS,CAACE,MAAM,GAAG,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAEDJ,SAAS,CAACK,SAAS,GAAIC,KAAK,IAAK;MAC/B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;MACnCV,UAAU,CAAEa,QAAQ,IAAK;QACvB,MAAMC,WAAW,GAAG,CAAC,GAAGD,QAAQ,EAAEH,IAAI,CAACK,SAAS,CAAC;QACjD,IAAID,WAAW,CAACE,MAAM,GAAG,GAAG,EAAE;UAC5BF,WAAW,CAACG,KAAK,CAAC,CAAC,CAAC,CAAE;QACxB;QACA,OAAOH,WAAW;MACpB,CAAC,CAAC;IACJ,CAAC;IAEDX,SAAS,CAACe,OAAO,GAAG,MAAM;MACxBZ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAEDL,KAAK,CAACC,SAAS,CAAC;IAEhB,OAAO,MAAM;MACXA,SAAS,CAACgB,KAAK,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAEC,KAAK,CAACvB,OAAO,CAACiB,MAAM,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;IAAG;IACzCC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,UAAU;MACjBf,IAAI,EAAEX,OAAO;MACb2B,WAAW,EAAE,oBAAoB;MACjCC,WAAW,EAAE,CAAC;MACdJ,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,oBACE7B,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BtC,OAAA,CAACJ,IAAI;MAACoB,IAAI,EAAEU;IAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAClC,EAAA,CArDID,WAAW;AAAAoC,EAAA,GAAXpC,WAAW;AAuDjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}