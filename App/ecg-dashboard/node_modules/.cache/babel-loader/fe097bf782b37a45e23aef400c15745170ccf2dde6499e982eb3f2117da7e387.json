{"ast":null,"code":"var _jsxFileName = \"F:\\\\York\\\\EECS3640project\\\\ecg-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n\n  // WebSocket connection\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080'); // Connect to WebSocket server\n\n    // When data is received from WebSocket\n    ws.onmessage = event => {\n      const value = parseInt(event.data, 10); // Convert the received data to integer\n      setData(prevData => {\n        const updatedData = [...prevData, value];\n        if (updatedData.length > 100) {\n          // Limit data to 100 points on the graph\n          updatedData.shift(); // Remove the first value if there are more than 100 points\n        }\n        return updatedData;\n      });\n    };\n\n    // Clean up on component unmount\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  // Chart.js data\n  const chartData = {\n    labels: Array(data.length).fill(''),\n    // Just create empty labels for the X-axis\n    datasets: [{\n      label: 'ECG Data',\n      data: data,\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 1,\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time ECG Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","jsxDEV","_jsxDEV","App","_s","data","setData","ws","WebSocket","onmessage","event","value","parseInt","prevData","updatedData","length","shift","close","chartData","labels","Array","fill","datasets","label","borderColor","borderWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/York/EECS3640project/ecg-dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS } from 'chart.js/auto';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  \n  // WebSocket connection\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:8080');  // Connect to WebSocket server\n\n    // When data is received from WebSocket\n    ws.onmessage = (event) => {\n      const value = parseInt(event.data, 10);  // Convert the received data to integer\n      setData(prevData => {\n        const updatedData = [...prevData, value];\n        if (updatedData.length > 100) {  // Limit data to 100 points on the graph\n          updatedData.shift();  // Remove the first value if there are more than 100 points\n        }\n        return updatedData;\n      });\n    };\n\n    // Clean up on component unmount\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  // Chart.js data\n  const chartData = {\n    labels: Array(data.length).fill(''),  // Just create empty labels for the X-axis\n    datasets: [\n      {\n        label: 'ECG Data',\n        data: data,\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 1,\n        fill: false,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Real-Time ECG Monitor</h1>\n      <Line data={chartData} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,EAAE,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAE;;IAElD;IACAD,EAAE,CAACE,SAAS,GAAIC,KAAK,IAAK;MACxB,MAAMC,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAACL,IAAI,EAAE,EAAE,CAAC,CAAC,CAAE;MACzCC,OAAO,CAACO,QAAQ,IAAI;QAClB,MAAMC,WAAW,GAAG,CAAC,GAAGD,QAAQ,EAAEF,KAAK,CAAC;QACxC,IAAIG,WAAW,CAACC,MAAM,GAAG,GAAG,EAAE;UAAG;UAC/BD,WAAW,CAACE,KAAK,CAAC,CAAC,CAAC,CAAE;QACxB;QACA,OAAOF,WAAW;MACpB,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,OAAO,MAAM;MACXP,EAAE,CAACU,KAAK,CAAC,CAAC;IACZ,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAEC,KAAK,CAACf,IAAI,CAACU,MAAM,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC;IAAG;IACtCC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,UAAU;MACjBlB,IAAI,EAAEA,IAAI;MACVmB,WAAW,EAAE,oBAAoB;MACjCC,WAAW,EAAE,CAAC;MACdJ,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,oBACEnB,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA;MAAAyB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B7B,OAAA,CAACJ,IAAI;MAACO,IAAI,EAAEa;IAAU;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV;AAAC3B,EAAA,CA7CQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}