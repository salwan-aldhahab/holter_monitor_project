{"ast":null,"code":"var _jsxFileName = \"F:\\\\York\\\\EECS3640project\\\\ecg-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2'; // For graphing the ECG data\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeECG = () => {\n  _s();\n  const [ecgData, setEcgData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [peaks, setPeaks] = useState([]);\n  const [ws, setWs] = useState(null);\n  useEffect(() => {\n    // WebSocket connection setup\n    let websocket = new WebSocket('ws://127.0.0.1:8080');\n    websocket.onopen = () => {\n      console.log('WebSocket connected!');\n    };\n    websocket.onmessage = event => {\n      const rawData = parseInt(event.data, 10); // Parse ECG value\n\n      // Smoothing the ECG data using moving average filter\n      const smoothedData = smoothSignal(rawData);\n      setEcgData(prevData => [...prevData, rawData]);\n      setFilteredData(prevData => [...prevData, smoothedData]);\n\n      // Detect R-wave peaks in the filtered data\n      detectPeaks(smoothedData);\n    };\n    websocket.onclose = () => {\n      console.log('WebSocket closed');\n    };\n    setWs(websocket);\n    return () => {\n      websocket.close();\n    };\n  }, []);\n\n  // Moving average filter to smooth ECG signal\n  const smoothSignal = newValue => {\n    const windowSize = 10; // Moving average window size\n    let smoothData = [...filteredData, newValue].slice(-windowSize); // Keep last 'windowSize' number of data points\n    let average = smoothData.reduce((acc, val) => acc + val, 0) / smoothData.length;\n    return average;\n  };\n\n  // Basic thresholding method to detect R-wave peaks\n  const detectPeaks = smoothedValue => {\n    const threshold = 3000; // Set a threshold to identify peaks (You can adjust this)\n    if (smoothedValue > threshold) {\n      setPeaks(prevPeaks => [...prevPeaks, smoothedValue]);\n    }\n  };\n\n  // Prepare chart data\n  const chartData = {\n    labels: Array(ecgData.length).fill(''),\n    datasets: [{\n      label: 'ECG Signal',\n      data: filteredData,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1,\n      fill: false\n    }, {\n      label: 'R-Waves',\n      data: peaks,\n      backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      borderWidth: 1,\n      pointRadius: 5,\n      pointHoverRadius: 7,\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time ECG Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ECG Data Count: \", ecgData.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeECG, \"aQOeZVOLBhjqIFAHMqywmpt7wng=\");\n_c = RealTimeECG;\nexport default RealTimeECG;\nvar _c;\n$RefreshReg$(_c, \"RealTimeECG\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","RealTimeECG","_s","ecgData","setEcgData","filteredData","setFilteredData","peaks","setPeaks","ws","setWs","websocket","WebSocket","onopen","console","log","onmessage","event","rawData","parseInt","data","smoothedData","smoothSignal","prevData","detectPeaks","onclose","close","newValue","windowSize","smoothData","slice","average","reduce","acc","val","length","smoothedValue","threshold","prevPeaks","chartData","labels","Array","fill","datasets","label","borderColor","borderWidth","backgroundColor","pointRadius","pointHoverRadius","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/York/EECS3640project/ecg-dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';  // For graphing the ECG data\nimport Chart from 'chart.js/auto';\n\nconst RealTimeECG = () => {\n  const [ecgData, setEcgData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [peaks, setPeaks] = useState([]);\n  const [ws, setWs] = useState(null);\n\n  useEffect(() => {\n    // WebSocket connection setup\n    let websocket = new WebSocket('ws://127.0.0.1:8080');\n\n    websocket.onopen = () => {\n      console.log('WebSocket connected!');\n    };\n\n    websocket.onmessage = (event) => {\n      const rawData = parseInt(event.data, 10);  // Parse ECG value\n\n      // Smoothing the ECG data using moving average filter\n      const smoothedData = smoothSignal(rawData);\n      setEcgData((prevData) => [...prevData, rawData]);\n      setFilteredData((prevData) => [...prevData, smoothedData]);\n\n      // Detect R-wave peaks in the filtered data\n      detectPeaks(smoothedData);\n    };\n\n    websocket.onclose = () => {\n      console.log('WebSocket closed');\n    };\n\n    setWs(websocket);\n\n    return () => {\n      websocket.close();\n    };\n  }, []);\n\n  // Moving average filter to smooth ECG signal\n  const smoothSignal = (newValue) => {\n    const windowSize = 10; // Moving average window size\n    let smoothData = [...filteredData, newValue].slice(-windowSize);  // Keep last 'windowSize' number of data points\n    let average = smoothData.reduce((acc, val) => acc + val, 0) / smoothData.length;\n    return average;\n  };\n\n  // Basic thresholding method to detect R-wave peaks\n  const detectPeaks = (smoothedValue) => {\n    const threshold = 3000;  // Set a threshold to identify peaks (You can adjust this)\n    if (smoothedValue > threshold) {\n      setPeaks((prevPeaks) => [...prevPeaks, smoothedValue]);\n    }\n  };\n\n  // Prepare chart data\n  const chartData = {\n    labels: Array(ecgData.length).fill(''),\n    datasets: [\n      {\n        label: 'ECG Signal',\n        data: filteredData,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1,\n        fill: false,\n      },\n      {\n        label: 'R-Waves',\n        data: peaks,\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n        borderWidth: 1,\n        pointRadius: 5,\n        pointHoverRadius: 7,\n        fill: false,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Real-Time ECG Monitor</h1>\n      <Line data={chartData} />\n      <p>ECG Data Count: {ecgData.length}</p>\n    </div>\n  );\n};\n\nexport default RealTimeECG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}